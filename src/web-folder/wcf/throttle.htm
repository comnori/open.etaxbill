<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
	    <style type="text/css">


#content h2 {
	font-size:1.6em;
	color:#606060;
}

blockquote {
	border: 1px dashed #b0b0b0;
	padding: 10px;
	margin: 30px;
}

            .style1
            {
                font-size: large;
            }
        </style>
	</head>
	<body>
            <a><span class="style1">How to throttle a Wcf service, help prevent DoS attacks, and maintain Wcf scalability</span></a><p>
                What can you do to prevent                 <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack" 
                    jquery1268212228694="35">denial of service (DoS)/a> attacks on your Wcf 
                services?&nbsp; A DoS attack occurs when a flood of client requests come into a 
                service and prevent legitimate requests from being made or slow down intended 
                processing.&nbsp; At the same time, you need to be careful not to stranglehold 
                legitimate requests and activity.
            </p>
            <h2>
                Throttling</h2>
            <div>
                Throttling is one mechanism that can be used to help mitigate the load from a 
                DoS attack.&nbsp; Throttling allows you to &quot;smooth&quot; out the load on the server.</div>
            <div>
                &nbsp;</div>
            <div>
                Wcf handles throttling through the
                <a href="http://msdn2.microsoft.com/en-gb/library/system.servicemodel.description.servicethrottlingbehavior.aspx" 
                    jquery1268212228694="36">ServiceThrottlingBehavior</a> class.&nbsp; This 
                represents a behavior that can be applied to a service.&nbsp; Behaviors can be 
                applied programmatically:</div>
            <div>
                &nbsp;</div>
            <div>
                <pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; FONT-FAMILY: consolas, 'Courier New', courier, monospace; BORDER-TOP-STYLE: none; COLOR: black; FONT-SIZE: 8pt; BORDER-LEFT-STYLE: none; OVERFLOW: visible; PADDING-TOP: 0px">ServiceHost host = <span 
                    style="COLOR: #0000ff">new</span> ServiceHost(
    <span style="COLOR: #0000ff">typeof</span>(MyContract),
    <span style="COLOR: #0000ff">new</span> Uri(<span style="COLOR: #006080">&quot;http://localhost:8080/MyContract&quot;</span>));
host.AddServiceEndpoint(
    <span style="COLOR: #006080">&quot;IMyContract&quot;</span>,
    <span style="COLOR: #0000ff">new</span> WSHttpBinding(),
    <span style="COLOR: #006080">&quot;&quot;</span>);
System.ServiceModel.Description.ServiceThrottlingBehavior throttlingBehavior =
    <span style="COLOR: #0000ff">new</span> System.ServiceModel.Description.ServiceThrottlingBehavior();
throttlingBehavior.MaxConcurrentCalls = 16;
throttlingBehavior.MaxConcurrentInstances = Int32.MaxValue;
throttlingBehavior.MaxConcurrentSessions = 10;
host.Description.Behaviors.Add(throttlingBehavior);
host.Open();</pre>
            </div>
            <div>
                &nbsp;</div>
            <div>
                or through the app.config:</div>
            <div>
                &nbsp;</div>
            <div>
                <pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; FONT-FAMILY: consolas, 'Courier New', courier, monospace; BORDER-TOP-STYLE: none; COLOR: black; FONT-SIZE: 8pt; BORDER-LEFT-STYLE: none; OVERFLOW: visible; PADDING-TOP: 0px">&lt;system.serviceModel&gt;
    &lt;services&gt;
        &lt;service
            name=<span style="COLOR: #006080">&quot;IMyContract&quot;</span>
            behaviorConfiguration=<span style="COLOR: #006080">&quot;myContract&quot;</span>&gt;
            &lt;host&gt;
                &lt;baseAddresses&gt;
                    &lt;add baseAddress=<span style="COLOR: #006080">&quot;http://localhost:8080/MyContract&quot;</span>/&gt;
                &lt;/baseAddresses&gt;
            &lt;/host&gt;
            &lt;endpoint
                name=<span style="COLOR: #006080">&quot;wsHttp&quot;</span>
                address=<span style="COLOR: #006080">&quot;&quot;</span>
                binding=<span style="COLOR: #006080">&quot;wsHttpBinding&quot;</span>
                contract=<span style="COLOR: #006080">&quot;IMyContract&quot;</span>&gt;
            &lt;/endpoint&gt;
        &lt;/service&gt;
    &lt;/services&gt;
    &lt;behaviors&gt;
        &lt;serviceBehaviors&gt;
            &lt;behavior name=<span style="COLOR: #006080">&quot;myContract&quot;</span>&gt;
                &lt;serviceMetadata httpGetEnabled=<span style="COLOR: #006080">&quot;True&quot;</span> /&gt;
                &lt;serviceThrottling
                    maxConcurrentCalls=<span style="COLOR: #006080">&quot;16&quot;</span>
                    maxConcurrentInstances=<span style="COLOR: #006080">&quot;2147483647&quot;</span>
                    maxConcurrentSessions=<span style="COLOR: #006080">&quot;10&quot;</span>/&gt;
            &lt;/behavior&gt;
        &lt;/serviceBehaviors&gt;
    &lt;/behaviors&gt;
&lt;/system.serviceModel&gt;</pre>
            </div>
            <div>
                &nbsp;</div>
            <div>
                There are 3 properties supported on the ServiceThrottlingBehavior:</div>
            <ol>
                <li><a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.description.servicethrottlingbehavior.maxconcurrentcalls.aspx" 
                        jquery1268212228694="37">MaxConcurrentCalls</a> (default = 16) [Per-message] 
                    The maximum number of messages that can actively be processed.&nbsp; Each client 
                    channel can have one pending message that does not count against this total 
                    until the service begins to process it.&nbsp; Increase this value if you want your 
                    service to be able to process a larger message load.</li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.description.servicethrottlingbehavior.maxconcurrentinstances.aspx" 
                        jquery1268212228694="38">MaxConcurrentInstances</a> (default = Int32.Max)&nbsp; 
                    The maximum number of
                    <a href="http://msdn2.microsoft.com/en-us/library/ms586707.aspx" 
                        jquery1268212228694="39">InstanceContext</a> objects in a service that can 
                    execute at one time.
                    <ul>
                        <li>What this setting translates into depends on the
                            <a href="http://msdn2.microsoft.com/en-us/library/ms575892.aspx" 
                                jquery1268212228694="40">InstanceContextMode</a> that is set on the
                            <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.servicebehaviorattribute.aspx" 
                                jquery1268212228694="41">ServiceBehaviorAttribute</a> on the service.&nbsp; If 
                            this is set to &quot;PerSession&quot;, then this would represent the maximum number of 
                            sessions.&nbsp; If this is set to &quot;PerCall&quot;, then this is the maximum number of 
                            concurrent calls.&nbsp; If this is set to &quot;Single&quot;, then this value doesn’t really 
                            mean anything anymore.</li>
                        <li>When a message comes into the service and the maximum number of InstanceContext 
                            objects already exists, then the message goes into a wait pattern until an 
                            existing InstanceContext is closed.&nbsp; This could cause a client to receive a 
                            timeout if no connection could be created in the allotted amount of time.</li>
                    </ul>
                </li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.description.servicethrottlingbehavior.maxconcurrentsessions.aspx" 
                        jquery1268212228694="42">MaxConcurrentSessions</a> (default = 10) 
                    [Per-channel] The maximum number of sessions that a service can accept at one 
                    time.&nbsp; This setting only affects &quot;session&quot; enabled channels, so a channel like 
                    BasicHttpBinding will not be affected.&nbsp; Once this threshold is reached, no 
                    channels will not be accepted to the service.&nbsp; Each listener object can have one 
                    pending channel session that does not count against this total until the service 
                    beings to process it.&nbsp; Increase this value if you want to allow more than 10 
                    concurrent sessions to be connected at any given time.
                    <ul>
                        <li>If you get exceptions like this, you may need to increase this value:</li>
                    </ul>
                </li>
            </ol>
            <blockquote>
                <p>
                    &quot;The open operation did not complete within the allotted timeout of 
                    00:00:59.9989999. The time allotted to this operation may have been a portion of 
                    a longer timeout.&quot;</p>
                <p>
                    <br />
                    &quot;The socket transfer timed out after 00:00:59.9979998. You have exceeded the 
                    timeout set on your binding. The time allotted to this operation may have been a 
                    portion of a longer timeout.&quot;</p>
            </blockquote>
            <p>
                You could set all the these values to Int32.Max.&nbsp; This is probably a good 
                think when you really want to perform some load testing of the server. (This is 
                how I discovered the usefulness of these settings)&nbsp; However it is important 
                to understand what consequences there are to doing </p>
            <p>
                <strong>Recommendations:</strong></p>
            <p>
                If your InstanceContext is set to &quot;PerCall&quot; you should set maxConcurrentSessions 
                and maxConcurrentCalls to the same value since each call is its own session.&nbsp; 
                You should target this value to be at least 25-30.&nbsp; However you shouldn’t 
                need to go higher than 64.</p>
            <p>
                If your InstanceContext is set to &quot;PerSession&quot; you should set maxConcurrentCalls 
                to be at least 25-30.&nbsp; Your maxConcurrentSessions should be the number of 
                users you want to have concurrently connected.</p>
            <p>
                If your InstanceContext is set to &quot;Single&quot; you should use the same settings as 
                &quot;PerSession&quot;, but the maxConcurrentSessions will only apply if session support 
                is active (this is set with the SessionMode attribute on the
                <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx" 
                    jquery1268212228694="43">ServiceContractAttribute</a>).</p>
            <h2>
                Quotas</h2>
            <p>
                Another potential area that is vulnerable to a DoS attack is where the client 
                may force the server to allocate a significant amount of memory over what should 
                be used.&nbsp;&nbsp; To help prevent this you can use Quotas.&nbsp; When a quota 
                is exceeded a <a href="http://msdn2.microsoft.com/en-us/library/ms406023.aspx" 
                    jquery1268212228694="44">QuotaExceededException</a> is thrown.&nbsp; Without 
                Quotas a malicious message could attempt to access all available memory can 
                create an OutOfMemoryException, or access all available stacks to cause a 
                StackOverflowException.&nbsp; The best part of the QuotaExceededException is 
                that the message causing it can just be discarded and the service can keep on 
                running.&nbsp; Without quotas the resulting exceptions could cause the service 
                to terminate.</p>
            <p>
                The most useful quota to work with to mitigate DoS attacks is the
                <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.basichttpbinding.maxbuffersize.aspx" 
                    jquery1268212228694="45">maxRecievedMessageSize</a> on the binding itself.&nbsp; 
                This setting restricts the maximum messages size so that a client can’t send 
                messages that are too large and flood the system.&nbsp; The default value is 
                65536 bytes.</p>
            <div>
                <pre style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 12pt; BORDER-RIGHT-STYLE: none; BACKGROUND-COLOR: #f4f4f4; MARGIN: 0em; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; FONT-FAMILY: consolas, 'Courier New', courier, monospace; BORDER-TOP-STYLE: none; COLOR: black; FONT-SIZE: 8pt; BORDER-LEFT-STYLE: none; OVERFLOW: visible; PADDING-TOP: 0px">&lt;bindings&gt;
    &lt;netTcpBinding&gt;
        &lt;binding name=<span style="COLOR: #006080">&quot;netTcp&quot;</span>
            maxReceivedMessageSize=<span style="COLOR: #006080">&quot;2147483647&quot;</span>
            maxConnections=<span style="COLOR: #006080">&quot;2147483647&quot;</span>&gt;
            &lt;readerQuotas
                maxDepth=<span style="COLOR: #006080">&quot;64&quot;</span>
                maxStringContentLength=<span style="COLOR: #006080">&quot;2147483647&quot;</span>
                maxArrayLength=<span style="COLOR: #006080">&quot;2147483647&quot;</span>
                maxBytesPerRead=<span style="COLOR: #006080">&quot;4096&quot;</span>
                maxNameTableCharCount=<span style="COLOR: #006080">&quot;16384&quot;</span>/&gt;
        &lt;/binding&gt;
    &lt;/netTcpBinding&gt;
&lt;/bindings&gt;</pre>
            </div>
            <div>
                &nbsp;</div>
            <p>
                Other quotas exist on the
                <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.nettcpbinding.readerquotas.aspx" 
                    jquery1268212228694="46">ReaderQuotas</a> property that can be used to 
                restrict message complexity.&nbsp; This can help mitigate excessive use of 
                endpoint processing resources like CPU and memory. These are:</p>
            <ol>
                <li><a href="http://msdn2.microsoft.com/en-us/library/ms366774.aspx" 
                        jquery1268212228694="47">MaxDepth</a> (default = 32) The maximum nested node 
                    depth.</li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/ms366776.aspx" 
                        jquery1268212228694="48">MaxStringContentLength</a> (default = 8192)&nbsp; The 
                    maximum string length allowed by the reader.&nbsp; You may need to increase this 
                    value if you anticipate potentially large messages.</li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/ms366772.aspx" 
                        jquery1268212228694="49">MaxArrayLength</a> (default = 16384)&nbsp; The maximum 
                    allowed array length.&nbsp; How many items can be in a single array in the message.</li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/ms366773.aspx" 
                        jquery1268212228694="50">MaxBytesPerRead</a> (default = 4096) The maximum 
                    allowed bytes returned for each read.&nbsp; This is the number of bytes consumed by a 
                    single call from the reader to Read().&nbsp; In practice this is used to limit the 
                    size of start tags, since a start tag must be completely buffered for the 
                    message to be processed.&nbsp; This can be a common attack area.&nbsp; It is recommended 
                    to keep this value at its default.</li>
                <li><a href="http://msdn2.microsoft.com/en-us/library/ms366775.aspx" 
                        jquery1268212228694="51">MaxNameTableCharCount</a> (default = 16384) The 
                    maximum number of characters in a table name.</li>
            </ol>
            <p>
                Some bindings such as NetTcpBinding offer a
                <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx" 
                    jquery1268212228694="52">maxConnections</a> property.&nbsp; This setting on 
                the client indicates the maximum number of connections to be pooled for 
                subsequent reuse.&nbsp; On the server, this setting is the maximum number of 
                connections allowed to be pending dispatch.&nbsp; The default is 10.</p>
	</body>
</html>